# tmux is the new screen. but i've learned screen bindings.

# Ctrl-a is our leader
set-option -g prefix C-a
unbind-key C-b
bind-key a send-prefix

# window management (previously 'screens')
bind-key C-a last-window
bind-key Space next-window
bind-key BSpace previous-window
bind-key c new-window
bind-key k kill-window

unbind-key '"'
bind-key '"' choose-window
#  - <leader>> "          to bring up list of running windows (w also works)

bind-key S split-window
unbind-key %
bind-key | split-window -h

bind-key Q break-pane
#  - <leader> Q          to quit split screens

bind-key A command-prompt -p "name: " "rename-window \"%%\""
#  - <leader> A          to rename a screen

bind-key Tab select-pane -t :.+
bind-key BTab select-pane -t :.-
#  - <leader> <tab>        go to next pane (o also works)
#  - <leader> <shift-tab>  go to previous pane

# TODO come up with a way to not overwrite a previously saved buffer - can use ${ENV}, but can't run commands
bind-key b capture-pane -S -32768 \; save-buffer ~/scratch/today/tmux-buffer.log \; delete-buffer; display-message "wrote buffer to disk"

unbind-key D
bind-key D choose-client

# deatch all other clients - we need a *nix compatible version
#bind-key T detach -a

# this will detatch all from session - in most version, just need to know our name
#bind-key T detach -s


# deatch the current client
unbind-key d
bind-key d detach-client

#  - <leader> [          to enter scrolling select/copy mode -- this is already available, start copying with <space>, finish with <enter>
#  - <leader> ]          to paste copied text -- this should be in [ copy mode, then 'p' to drop the contents, but doesn't seem to be working

#  - <leader> '         go to window <interactive>, allowing easier access to 9+
#  - <leader> f         find a window by name
#  - <leader> q         display pane numbers
#  - <leader> t         displays a clock
#  - <leader> s         switch session
#  - <leader> {         swap current pane with previous (} does next)

# jump to windows with activity
bind-key N next-window -a
bind-key P previous-window -a

bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf re-sourced"

# window movement
bind E swap-window -t -1
bind F swap-window -t +1

# pane movement
bind U swap-pane -U

# pane jumps
## can be accomplished with d-pad input

# OMG AWESOME - h/t rkroeker
# http://maciej.lasyk.info/2014/Nov/19/tmux-join-pane/
bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%' -t 1 -h"

# send a command to all panes in a session - but if the window is linked from a different session, doesn't get it
bind e command-prompt -p "session?,command?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\|xargs -I\{\} tmux send-keys -t %1:\{\} %2 Enter\""

# set-option -g default-terminal "screen-256color"
set-option -g default-terminal 'xterm-256color'

set-option -g visual-bell off
#set-option -g bell-action any

# this allows multiple, different-resolution clients to be connected to the same session
# without causing the entire session to resize to the smaller client size - it will be done per window
set-option -g aggressive-resize on

# from the documentation, enabling this can cause high CPU load - and we don't really need it in anyway
set-option -g automatic-rename off

# disable mouse controls
set-option -g mouse-select-pane off
set-option -g mouse-select-window off
set-option -g mode-mouse off

# use the terminal screen AND the tmux screen
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

## pretty much cargo cult
set-option -g status-keys vi
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)

setw -g mode-keys vi
setw -g monitor-activity on

set-option -g status-utf8 on
# set-option -g status-justify centre
set-option -g status-justify left
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-left-length 40
set-option -g status-right-length 80

# pane boundary coloring
set-option -g pane-active-border-fg green
set-option -g pane-active-border-bg black
set-option -g pane-border-fg white
set-option -g pane-border-bg black

# other coloring
set-option -g message-fg black
set-option -g message-bg green

# these are the only ones that previously showed 'yellow' when running 'tmux show-options -g'
set-option -g message-command-fg magenta
# TODO make this work on unix
#set-option -g message-command-style fg=magenta,bg=black

#setw -g mode-bg black

setw -g window-status-bg black
setw -g window-status-current-fg green

# if there is a bell, throw some flags - what can we do with -attr?
setw -g window-status-bell-attr default
setw -g window-status-bell-fg red

# TODO better understand the difference between content vs activity
setw -g window-status-content-attr default
setw -g window-status-content-fg cyan

setw -g window-status-activity-attr default
setw -g window-status-activity-fg cyan

#set -g status-left '#[fg=red]#H#[fg=green]:#[fg=white]#S #[fg=green]][#[default]'
set -g status-left ""

set -g status-interval 1
#set -g status-right '#[fg=green]][#[fg=white] #(tmux-mem-cpu-load 5 4) #[fg=green]][ #[fg=yellow]%H:%M#[default]'
set -g status-right '#(TZ=UTC date -u +%%H:%%Mu)|%m/%d %H:%M.%Sl'

# TODO how high can we go without taking a perf hit? was doing between 2-10k in screen
set -g history-limit 50000

# TODO need to run this only if the file exists
# https://github.com/tmux-plugins/tmux-resurrect
run-shell ~/git/tmux-plugins/tmux-resurrect/resurrect.tmux

# TODO need to run this only if the file exists
# https://github.com/tmux-plugins/tmux-logging
run-shell ~/git/tmux-plugins/tmux-logging/logging.tmux


